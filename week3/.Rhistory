#Install pwr package if needed
if (!require(pwr)) {install.packages('pwr')}
library(pwr)
alpha_level <- 0.05 #set alpha level
n <- 100 #set number of observations
st_dev <- 1 #set true standard deviation
SESOI <- 0.5 #set smallest effect size of interest (raw mean difference)
# calculate lower and upper critical values c_l and c_u
c_l <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = FALSE))
c_u <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = TRUE))
# calculate lower and upper confidence interval for sd
st_dev * c_l
st_dev * c_u
# d based on lower bound of the 95CI around the SD
SESOI/(st_dev * c_l)
# d based on upper bound of the 95CI around the SD
SESOI/(st_dev * c_u)
# calculate lower and upper confidence interval for sd
st_dev * c_l
st_dev * c_u
alpha_level <- 0.05 #set alpha level
n <- 100 #set number of observations
st_dev <- 2 #set true standard deviation
SESOI <- 0.5 #set smallest effect size of interest (raw mean difference)
# calculate lower and upper critical values c_l and c_u
c_l <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = FALSE))
c_u <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = TRUE))
# calculate lower and upper confidence interval for sd
st_dev * c_l
st_dev * c_u
alpha_level <- 0.05 #set alpha level
n <- 20 #set number of observations
st_dev <- 1 #set true standard deviation
SESOI <- 0.5 #set smallest effect size of interest (raw mean difference)
# calculate lower and upper critical values c_l and c_u
c_l <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = FALSE))
c_u <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = TRUE))
# calculate lower and upper confidence interval for sd
st_dev * c_l
st_dev * c_u
pwr.t.test(d = SESOI/(st_dev * c_l), power = 0.9, sig.level = 0.05)
# calculate lower and upper confidence interval for sd
st_dev * c_l
st_dev * c_u
alpha_level <- 0.05 #set alpha level
n <- 498 #set number of observations
st_dev <- 1 #set true standard deviation
SESOI <- 0.5 #set smallest effect size of interest (raw mean difference)
# calculate lower and upper critical values c_l and c_u
c_l <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = FALSE))
c_u <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = TRUE))
# calculate lower and upper confidence interval for sd
st_dev * c_l
st_dev * c_u
alpha_level <- 0.05 #set alpha level
n <- 489 #set number of observations
st_dev <- 1 #set true standard deviation
SESOI <- 0.5 #set smallest effect size of interest (raw mean difference)
# calculate lower and upper critical values c_l and c_u
c_l <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = FALSE))
c_u <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = TRUE))
# calculate lower and upper confidence interval for sd
st_dev * c_l
st_dev * c_u
alpha_level <- 0.05 #set alpha level
n <- 849 #set number of observations
st_dev <- 1 #set true standard deviation
SESOI <- 0.5 #set smallest effect size of interest (raw mean difference)
# calculate lower and upper critical values c_l and c_u
c_l <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = FALSE))
c_u <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = TRUE))
# calculate lower and upper confidence interval for sd
st_dev * c_l
st_dev * c_u
alpha_level <- 0.05 #set alpha level
n <- 948 #set number of observations
st_dev <- 1 #set true standard deviation
SESOI <- 0.5 #set smallest effect size of interest (raw mean difference)
# calculate lower and upper critical values c_l and c_u
c_l <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = FALSE))
c_u <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = TRUE))
# calculate lower and upper confidence interval for sd
st_dev * c_l
st_dev * c_u
alpha_level <- 0.05 #set alpha level
n <- 50 #set number of observations
st_dev <- 1.2 #set true standard deviation
SESOI <- 0.5 #set smallest effect size of interest (raw mean difference)
# calculate lower and upper critical values c_l and c_u
c_l <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = FALSE))
c_u <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = TRUE))
# calculate lower and upper confidence interval for sd
st_dev * c_l
st_dev * c_u
# d based on lower bound of the 95CI around the SD
SESOI/(st_dev * c_l)
# d based on upper bound of the 95CI around the SD
SESOI/(st_dev * c_u)
# d based on lower bound of the 95CI around the SD
SESOI/(st_dev * c_l)
# d based on upper bound of the 95CI around the SD
SESOI/(st_dev * c_u)
pwr.t.test(d = SESOI/(st_dev * c_l), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_l), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_u), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_l), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_u), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_l), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_l), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_u), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_l), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_u), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_l), power = 0.9, sig.level = 0.05)
# d based on lower bound of the 95CI around the SD
SESOI/(st_dev * c_l)
pwr.t.test(d = SESOI/(st_dev * c_u), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_l), power = 0.9, sig.level = 0.05)
# d based on upper bound of the 95CI around the SD
SESOI/(st_dev * c_u)
# d based on lower bound of the 95CI around the SD
SESOI/(st_dev * c_l)
# d based on lower bound of the 95CI around the SD
SESOI/(st_dev * c_l)
# d based on upper bound of the 95CI around the SD
SESOI/(st_dev * c_u)
# d based on lower bound of the 95CI around the SD
SESOI/(st_dev * c_l)
n <- 50 #set number of observations
alpha_level <- 0.05 #set alpha level
n <- 50 #set number of observations
st_dev <- 1.2 #set true standard deviation
SESOI <- 0.5 #set smallest effect size of interest (raw mean difference)
# calculate lower and upper critical values c_l and c_u
c_l <- sqrt((n - 1)/qchisq(alpha_level/2, n - 1, lower.tail = FALSE))
c_l
c_u
# calculate lower and upper confidence interval for sd
st_dev * c_l
st_dev * c_u
# d based on lower bound of the 95CI around the SD
SESOI/(st_dev * c_l)
# d based on upper bound of the 95CI around the SD
SESOI/(st_dev * c_u)
# d based on lower bound of the 95CI around the SD
SESOI/(st_dev * c_l)
# d based on upper bound of the 95CI around the SD
SESOI/(st_dev * c_u)
pwr.t.test(d = SESOI/(st_dev * c_l), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_u), power = 0.9, sig.level = 0.05)
# Power analysis for true standard deviation for comparison
pwr.t.test(d = SESOI/st_dev, power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_l), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_u), power = 0.9, sig.level = 0.05)
# Power analysis for true standard deviation for comparison
pwr.t.test(d = SESOI/st_dev, power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_l), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_l), power = 0.9, sig.level = 0.05)
pwr.t.test(d = SESOI/(st_dev * c_u), power = 0.9, sig.level = 0.05)
# d based on lower bound of the 95CI around the SD
SESOI/(st_dev * c_l)
# It is recommended to update all packages before running this code.
if (!require(pwr)) {install.packages('pwr')}
library(pwr)
if (!require(devtools)) {install.packages('devtools')}
library(devtools)
if (!require(MASS)) {install.packages('MASS')}
library(MASS)
if (!require(afex)) {install.packages('afex')}
library(afex)
library(ggplot2)
if (!require(reshape2)) {install.packages('reshape2')}
library(reshape2)
devtools::install_github("arcaldwell49/Superpower")
library(Superpower) # Load Superpower
# Disable scientific notation (1.05e10)
options(scipen = 999)
design_result <- ANOVA_design(design = "2b*2w",
n = 40,
mu = c(1.03, 1.41, 0.98, 1.01),
sd = 1.03,
r = 0.8,
labelnames = c("voice", "human", "robot", "emotion", "cheerful", "sad"),
plot = TRUE)
#####################
# Code for Question 1
design_result <- ANOVA_design(design = "2b*2w",
n = 40,
mu = c(1.03, 1.41, 0.98, 1.01),
sd = 1.03,
r = 0.8,
labelnames = c("voice", "human", "robot", "emotion", "cheerful", "sad"),
plot = TRUE)
# Simulate data using ANOVA_exact function and print results
ANOVA_exact(design_result, alpha = 0.05)
####################################
# Code for Question 2, 3, 4: Power in a Two Group One-Way ANOVA
design_result <- ANOVA_design(design = "2b",
n = 100,
mu = c(24, 26.2),
sd = 6.4,
labelnames = c("condition", "control", "pet"),
plot = TRUE)
ANOVA_exact(design_result, alpha_level = 0.05)
####################################
# Code for Question 2, 3, 4: Power in a Two Group One-Way ANOVA
design_result <- ANOVA_design(design = "2b",
n = 179,
mu = c(24, 26.2),
sd = 6.4,
labelnames = c("condition", "control", "pet"),
plot = TRUE)
ANOVA_exact(design_result, alpha_level = 0.05)
####################################
# Code for Question 2, 3, 4: Power in a Two Group One-Way ANOVA
design_result <- ANOVA_design(design = "2b",
n = 173,
mu = c(24, 26.2),
sd = 6.4,
labelnames = c("condition", "control", "pet"),
plot = TRUE)
ANOVA_exact(design_result, alpha_level = 0.05)
####################################
# Code for Question 2, 3, 4: Power in a Two Group One-Way ANOVA
design_result <- ANOVA_design(design = "2b",
n = 187,
mu = c(24, 26.2),
sd = 6.4,
labelnames = c("condition", "control", "pet"),
plot = TRUE)
ANOVA_exact(design_result, alpha_level = 0.05)
####################################
# Code for Question 2, 3, 4: Power in a Two Group One-Way ANOVA
design_result <- ANOVA_design(design = "2b",
n = 179,
mu = c(24, 26.2),
sd = 6.4,
labelnames = c("condition", "control", "pet"),
plot = TRUE)
ANOVA_exact(design_result, alpha_level = 0.05)
####################################
# Code for Question 2, 3, 4: Power in a Two Group One-Way ANOVA
design_result <- ANOVA_design(design = "2b",
n = 173,
mu = c(24, 26.2),
sd = 6.4,
labelnames = c("condition", "control", "pet"),
plot = TRUE)
ANOVA_exact(design_result, alpha_level = 0.05)
####################################
# Code for Question 2, 3, 4: Power in a Two Group One-Way ANOVA
design_result <- ANOVA_design(design = "2b",
n = 179,
mu = c(24, 26.2),
sd = 6.4,
labelnames = c("condition", "control", "pet"),
plot = TRUE)
ANOVA_exact(design_result, alpha_level = 0.05)
# Create a power curve plot
plot_power(design_result, min_n = 10, max_n = 250, plot = TRUE)
####################################
# Code for Question 2, 3, 4: Power in a Two Group One-Way ANOVA
design_result <- ANOVA_design(design = "2b",
n = 179,
mu = c(24, 26),
sd = 6.4,
labelnames = c("condition", "control", "pet"),
plot = TRUE)
ANOVA_exact(design_result, alpha_level = 0.05)
# Create a power curve plot
plot_power(design_result, min_n = 10, max_n = 250, plot = TRUE)
####################################
# Code for Question 2, 3, 4: Power in a Two Group One-Way ANOVA
design_result <- ANOVA_design(design = "2b",
n = 179,
mu = c(24, 26),
sd = 6.8,
labelnames = c("condition", "control", "pet"),
plot = TRUE)
ANOVA_exact(design_result, alpha_level = 0.05)
# Create a power curve plot
plot_power(design_result, min_n = 10, max_n = 250, plot = TRUE)
#############################
# Question 5 and 6: Three independent groups
design_result <- ANOVA_design(design = "3b",
n = 50,
mu = c(24, 26.2, 26.6),
sd = 6.4,
labelnames = c("condition", "control", "cat", "dog"),
plot = TRUE)
# Simulate data using ANOVA_exact function and print results
ANOVA_exact(design_result, alpha = 0.05)
# Create a power curve plot
plot_power(design_result, min_n = 10, max_n = 250, plot = TRUE)
#############################
# Question 5 and 6: Three independent groups
design_result <- ANOVA_design(design = "3b",
n = 135,
mu = c(24, 26.2, 26.6),
sd = 6.4,
labelnames = c("condition", "control", "cat", "dog"),
plot = TRUE)
# Simulate data using ANOVA_exact function and print results
ANOVA_exact(design_result, alpha = 0.05)
ANOVA_power(design_result,
alpha = 0.05,
nsims = 200,
p_adjust = "holm")
ANOVA_power(design_result,
alpha = 0.05,
nsims = 800,
p_adjust = "holm")
##########################
#Question 9: Two group dependent design
design_result <- ANOVA_design(design = "2w",
n = 34,
mu = c(-0.25, 0.25),
sd = 1,
r = 0.5,
labelnames = c("speed", "fast", "slow"),
plot = TRUE)
ANOVA_exact(design_result)
##########################
#Question 9: Two group dependent design
design_result <- ANOVA_design(design = "2w",
n = 34,
mu = c(-0.25, 0.25),
sd = 1,
r = 0.7,
labelnames = c("speed", "fast", "slow"),
plot = TRUE)
ANOVA_exact(design_result)
#####################
# Code for Question 1
design_result <- ANOVA_design(design = "2b*2w",
n = 40,
mu = c(1.03, 1.41, 0.98, 1.01),
sd = 1.03,
r = 0.8,
labelnames = c("voice", "human", "robot", "emotion", "cheerful", "sad"),
plot = TRUE)
# Simulate data using ANOVA_exact function and print results
ANOVA_exact(design_result, alpha = 0.05)
